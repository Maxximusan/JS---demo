{"mappings":"ACAA,MAAM,EAAQ,SAAS,aAAa,CAAC,2BAC/B,EAAS,SAAS,aAAa,CAAC,yBAChC,EAAQ,SAAS,aAAa,CAAC,4BAC/B,EAAW,SAAS,aAAa,CAAC,6BAExC,EAAO,gBAAgB,CAAC,QAYxB,WACE,GAAe,EACf,IAAM,EAAW,EAAO,GAAG,CAAC,EAE5B,CAAA,EAAM,WAAW,CAAG,GACpB,EAAS,WAAW,CAAG,sDAEvB,QAAQ,IAAI,CAAC,GAAU,IAAI,CAAC,CAAC,CAAC,MAAA,CAAK,CAAE,KAAA,CAAI,CAAC,IACxC,EAAM,WAAW,CAAG,CAAC,mDAAS,EAAE,EAAM,+FAAiB,EAAE,EAAK,kDAAQ,CAAC,CAEvE,AAQJ,SAA6B,CAAC,MAAA,CAAK,CAAE,KAAA,CAAI,CAAE,YAAA,CAAW,CAAC,EACrD,IAAM,EAAK,CAAC,QAAQ,EAAE,EAAY,SAAS,EAAE,EAAM,SAAS,EAAE,EAAK,UAAU,CAAC,CAC9E,EAAM,kBAAkB,CAAC,YAAa,EACxC,EAXuB,CAAC,MAAA,EAAO,KAAA,EAAM,YAAA,CAAW,EAC9C,GACA,QAAQ,GAAG,CAAC,GAAU,IAAI,CAAC,KACzB,EAAS,WAAW,CAAG,oCAEzB,EACF,GA1BA,MAAM,EAAS,CACb,MACA,OACD,UACA,UACA,OACA,CAED,QAAQ,GAAG,CAAC,GACZ,IAAI,EAAc,EAyBlB,SAAS,EAAI,CAAK,EAChB,OAAO,IAAI,QAAQ,AAAA,IACjB,IAAM,EASD,KAAK,KAAK,CAAC,AAAiB,KAAjB,KAAK,MAAM,GATA,KAE3B,WAAW,KACT,EAAQ,CAAC,MAAA,EAAO,KAAA,CAAI,EACtB,EAAG,EACL,EACF","sources":["<anon>","src/JS/test different js stuff/promiseTest.js"],"sourcesContent":["const tablo = document.querySelector('[data-active = \"tablo\"]');\nconst button = document.querySelector('[data-button = \"but\"]');\nconst winer = document.querySelector('[data-active = \"winner\"]');\nconst progress = document.querySelector('[data-active = \"progres\"]');\nbutton.addEventListener(\"click\", onClick);\nconst horses = [\n    \"ava\",\n    \"lucy\",\n    \" korola\",\n    \"bambuka\",\n    \"chad\"\n];\nconsole.log(tablo);\nlet raceCounter = 0;\nfunction onClick() {\n    raceCounter += 1;\n    const promises = horses.map(run);\n    winer.textContent = \"\";\n    progress.textContent = \"\\u0417\\u0430\\u0435\\u0437\\u0434 \\u043D\\u0430\\u0447\\u0430\\u043B\\u0441\\u044F! \\u0412\\u0441\\u0435 \\u0441\\u0442\\u0430\\u0432\\u043A\\u0438 \\u0441\\u0434\\u0435\\u043B\\u0430\\u043D\\u044B \\u0438 \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u044E\\u0442\\u0441\\u044F!\";\n    Promise.race(promises).then(({ horse, time })=>{\n        winer.textContent = ` \\u{41F}\\u{43E}\\u{431}\\u{435}\\u{434}\\u{438}\\u{43B} ${horse}, \\u{444}\\u{438}\\u{43D}\\u{438}\\u{448}\\u{438}\\u{440}\\u{43E}\\u{432}\\u{430}\\u{43B} \\u{437}\\u{430} ${time} \\u{432}\\u{440}\\u{435}\\u{43C}\\u{435}\\u{43D}\\u{438}`;\n        updateResultsTable({\n            horse,\n            time,\n            raceCounter\n        });\n    });\n    Promise.all(promises).then(()=>{\n        progress.textContent = \"\\u0417\\u0430\\u0435\\u0437\\u0434 \\u043E\\u043A\\u043E\\u043D\\u0447\\u0435\\u043D, \\u0434\\u0435\\u043B\\u0430\\u0439\\u0442\\u0435 \\u0432\\u0430\\u0448\\u0438 \\u0441\\u0442\\u0430\\u0432\\u043A\\u0438\";\n    });\n}\nfunction updateResultsTable({ horse, time, raceCounter }) {\n    const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;\n    tablo.insertAdjacentHTML(\"beforeend\", tr);\n}\nfunction run(horse) {\n    return new Promise((resolve)=>{\n        const time = getRandomtime(2000, 3500);\n        setTimeout(()=>{\n            resolve({\n                horse,\n                time\n            });\n        }, time);\n    });\n}\nfunction getRandomtime(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n} // propise = new Promise((resolve, reject) => {\n //   const canFulfill = Math.random() > 0.5;\n //   setTimeout(() => {\n //     if (canFulfill) {\n //       resolve(\"Заезд начался! Все ставки сделаны!!!\");\n //     } else {\n //       reject(\"NAHOY )))\");\n //     }\n //   }, 5000);\n //   console.log(canFulfill);\n // });\n\n//# sourceMappingURL=promiseTest.7584eb60.js.map\n","const tablo = document.querySelector('[data-active = \"tablo\"]')\nconst button = document.querySelector('[data-button = \"but\"]')\nconst winer = document.querySelector('[data-active = \"winner\"]')\nconst progress = document.querySelector('[data-active = \"progres\"]')\n\nbutton.addEventListener('click', onClick)\n\nconst horses = [\n  'ava',\n  'lucy',\n ' korola',\n 'bambuka',\n 'chad'\n]\n\nconsole.log(tablo );\nlet raceCounter = 0\nfunction onClick() {\n  raceCounter += 1\n  const promises = horses.map(run)\n\n  winer.textContent = ''\n  progress.textContent = 'Заезд начался! Все ставки сделаны и не принимаются!'\n\n  Promise.race(promises).then(({horse, time}) => {\n    winer.textContent = ` Победил ${horse}, финишировал за ${time} времени`\n\n    updateResultsTable({horse, time, raceCounter})\n  })\n  Promise.all(promises).then(() => {\n    progress.textContent = 'Заезд окончен, делайте ваши ставки'\n   \n  })\n}\n\nfunction updateResultsTable ({horse, time, raceCounter}){\n  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`\n  tablo.insertAdjacentHTML('beforeend', tr)\n}\n\n\nfunction run(horse){\n  return new Promise(resolve => {\n    const time = getRandomtime(2000, 3500)\n\n    setTimeout(() => {\n      resolve({horse, time})\n    }, time)\n  })\n}\n\nfunction getRandomtime(min, max){\n  return Math.floor(Math.random() * (max - min +1) + min)\n}\n// propise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve(\"Заезд начался! Все ставки сделаны!!!\");\n//     } else {\n//       reject(\"NAHOY )))\");\n//     }\n//   }, 5000);\n//   console.log(canFulfill);\n// });"],"names":["tablo","document","querySelector","button","winer","progress","addEventListener","raceCounter","promises","horses","map","run","textContent","Promise","race","then","horse","time","updateResultsTable","tr","insertAdjacentHTML","all","console","log","resolve","Math","floor","max","random","setTimeout"],"version":3,"file":"promiseTest.7584eb60.js.map"}