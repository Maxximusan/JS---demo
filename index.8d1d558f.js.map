{"mappings":"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","sources":["<anon>","src/JS/test different js stuff/test.js"],"sourcesContent":["// // function findLongestWord(string) {\n// //     let allWord = string.split(' ');\n// //     let bigWord = allWord[0];\n// //     for (let i = 0; i < allWord.length; i += 1) {\n// //         if (allWord[i].length > bigWord.length) {\n// //             bigWord = allWord[i];\n// //         }\n// //     }\n// //     return bigWord;\n// // }\n// // console.log(findLongestWord(\"Lucy stacy csilla \"));\n// // console.log(findLongestWord(\"The quick brown fox jumped over the lazy dog\"));\n// // console.log(findLongestWord(\"Google do a roll\"));\n// // console.table(findLongestWord(\"May the force be with you\"));\n// function printContactsInfo(names = \"\", phones = \"\") {\n//   const arrayOfNames = names.split(\",\");\n//   const arrayOfPhones = phones.split(\",\");\n//   console.log(\"arrayOfNames\", arrayOfNames);\n//   console.log(\"arrayOfPhones\", arrayOfPhones);\n//   for (let i = 0; i < arrayOfNames.length; i += 1) {\n//     const aName = arrayOfNames[i];\n//     const aPhones = arrayOfPhones[i];\n//     console.log(`name: ${aName}; phones: ${aPhones}`);\n//   }\n// }\n// printContactsInfo(\n//   \"Jacob,William,Solomon,Nicolas\",\n//   \"89001234567,89001112233,890055566377,890055566300\"\n// );\n// // const book = {\n// //     title: \"The Last Kingdom\",\n// //     author: \"Bernard Cornwell\",\n// //     genres: [\"historical prose\", \"adventure\"],\n// //     isPublic: true,\n// //     rating: 8.38,\n// // };\n// // book.rating = 9;\n// // book.isPublic = false;\n// // book.genres.push(\"драма\");\n// // console.log(book.rating); // 9\n// // console.log(book.isPublic); // false\n// // console.log(book.genres); // ['historical prose', 'adventures', 'драма']\n// // const a = { x: 2, y: 10, z: 35 };\n// // const b = { x: 5, y: 4, z: 17, t: 80, q: 55 };\n// // const c = { ...a, x: 1, ...b, z: 6, name: 'mango', color: 'green' };\n// // console.log(c)\n// // const name = \"Repair Droid\";\n// // const price = 2500;\n// // const image = \"https://via.placeholder.com/640x480\";\n// // const tags = [\"on sale\", \"trending\", \"best buy\"];\n// // const product = {\n// //     name,\n// //     price,\n// //     image,\n// //     tags,\n// //     // Change code below this line\n// //     // Change code above this line\n// // };\n// // console.log(product);\n// // const emailInputName = \"email\";\n// // const passwordInputName = \"password\";\n// // const credentials = {\n// //     // Change code below this line\n// //     [emailInputName]: \"henry.carter@aptmail.com\",\n// //     [passwordInputName]: \"jqueryismyjam\",\n// //     // Change code above this line\n// // };\n// // console.log(credentials);\n// // const products = [\n// //     { name: \"Radar\", price: 1300, quantity: 4 },\n// //     { name: \"Scanner\", price: 2700, quantity: 3 },\n// //     { name: \"Droid\", price: 400, quantity: 7 },\n// //     { name: \"Grip\", price: 1200, quantity: 9 },\n// // ];\n// // console.table(products);\n// // function getProductPrice(productName) {\n// //     // Change code below this line\n// //     for (const product of products) {\n// //         if (product.name === productName) {\n// //             return (product.price);\n// //         }\n// //     }\n// //     return null;\n// //     // Change code above this line\n// // }\n// // console.log(getProductPrice(\"Radar\"));\n// // const products = [\n// //     { name: \"Radar\", price: 1300, quantity: 4 },\n// //     { name: \"Scanner\", price: 2700, quantity: 3 },\n// //     { name: \"Droid\", price: 400, quantity: 7 },\n// //     { name: \"Grip\", price: 1200, quantity: 9 },\n// // ];\n// // function getAllPropValues(propName) {\n// //     // Change code below this line\n// //     const emptyMassive = [];\n// //     for (const product of products) {\n// //         if (Object.keys(product).includes(propName)) {\n// //             emptyMassive.push(product[propName]);\n// //         }\n// //     }\n// //     return emptyMassive;\n// //     // Change code above this line\n// // }\n// // console.log(getAllPropValues('price'));\n// // автопроверка 3 модуль 41 задача\n// // const atTheOldToad = {\n// //     potions: [\n// //         { name: \"Speed potion\", price: 460 },\n// //         { name: \"Dragon breath\", price: 780 },\n// //         { name: \"Stone skin\", price: 520 },\n// //     ],\n// //     getPotions() {\n// //         return this.potions;\n// //     },\n// // addPotion(newPotion) {\n// //     for (potion of this.potions) {\n// //         if (potion.name === newPotion.name) {\n// //             return `Error! Potion ${newPotion.name} is already in your inventory!`;\n// //         }\n// //     }\n// //     this.potions.push(newPotion);\n// // },\n// //     removePotion(potionName) {\n// //         for (let potion of this.potions) {\n// //             if (potion.name === potionName) {\n// //                 const indexPotion = this.potions.indexOf(potion);\n// //                 if (indexPotion === -1) {\n// //                     return `Potion ${potionName} is not in inventory!`;\n// //                 };\n// //                 this.potions.splice(indexPotion, 1);\n// //             }\n// //         }\n// //     },\n// //     updatePotionName(oldName, newName) {\n// //         for (let potion of this.potions) {\n// //             if (potion.name === oldName) {\n// //                 potion.name = newName;\n// //             }\n// //         }\n// //         // Change code above this line\n// //     }\n// // }\n// // callback - пример 1\n// // const fna = function (message, callback) {\n// //     console.log(message);\n// //     console.log(callback);\n// //     callback(100, 888);\n// // }\n// // const fnb = function (number, total) {\n// //     console.log(\"вызов fnb\", number, total);\n// // }\n// // fna('fuck monkey', fnb);\n// // callback - пример 2 + инлайн функция + строчная\n// const fnA = function (a, b, callback) {\n//   const result = callback(a, b);\n//   console.log(\"result\", result);\n// };\n// const fnB = function (x, y) {\n//   return x + y;\n// };\n// const fnC = function (x, y) {\n//   return x - y;\n// };\n// fnA(2, 3, fnB);\n// fnA(10, 8, function (x, y) {\n//   return x - y;\n// });\n// fnA(11, 8, (x, y) => x * y);\n// // const navEl = document.querySelector('.list');\n// // const navLiEl = navEl.firstElementChild;\n// // console.log(navLiEl);\n// // const navAllChild = navLiEl.firstElementChild;\n// // console.log(navAllChild);\n// // navEl.classList.add('fuck');\n// // navLiEl.classList.toggle('in-open');\n// // navAllChild.textContent = 'Влажный язык'\n// // console.log(navAllChild);\n// // const imgForEl = document.createElement('img');\n// // imgForEl.alt = 'бабочка'\n// // navLiEl.appendChild(imgForEl);\n// // console.log(navLiEl);\n// // const min = 6;\n// // const max = 21;\n// // let total = 0;\n// // for (let i = min; i <= max; i += 1) {\n// //     if (i % 2 !== 0) {\n// //         continue;\n// //     }\n// //     total += i;\n// // };\n// // console.log(total)\n// // const string = \"javascript\";\n// // for (const character of string) {\n// //     console.log(character);\n// // }\n// const tratata = [];\n// console.log(tratata);\n// const fmdlkb = [\"a\", \"b\", \"c\", \"d\", \"e\", 2, 7];\n// fmdlkb.pop();\n// console.log(fmdlkb);\n// fmdlkb.shift();\n// console.log(fmdlkb);\n// fmdlkb.unshift(\"Z\");\n// console.log(fmdlkb);\n// fmdlkb.splice(2, 2, \"Q\");\n// console.log(fmdlkb);\n// //\n// // console.log(fmdlkb.join(' '));\n// const ewf = fmdlkb.join(\"\");\n// console.log(ewf);\n// const rrr = [38, 90, 42, 17];\n// // Math.min(...rrr);\n// console.log(Math.max(...rrr));\n// function find_average(array) {\n//   let total = 0;\n//   if (array.length === 0) {\n//     return 0;\n//   }\n//   for (let arr of array) {\n//     total += arr;\n//   }\n//   return total / array.length;\n// }\n// // const find_average = (array) => {\n// //     return array.length === 0 ? 0 : array.reduce((acc, ind) => acc + ind, 0) / array.length\n// // }\n// // find_average([1, 2, 3]);\n// // function find_average(array) {\n// //     if (array.length == 0) return 0\n// //     let result = 0;\n// //     for (let num of array) {\n// //         result += num;\n// //     }\n// //     return result / array.length;\n// // }\n// // function find_average(array) {\n// //     return (Math.min(...array) + Math.max(...array)) / 2;\n// // }\n// console.log(find_average([1, 2, 3]));\n// console.log(find_average([10, 30, 70]));\n// console.log(find_average([]));\n// function getGrade(s1, s2, s3) {\n//   let total = (s1 + s2 + s3) / 3;\n//   if (total <= 100 && total >= 90) {\n//     return \"A\";\n//   } else if (total <= 90 && total >= 80) {\n//     return \"B\";\n//   } else if (total <= 80 && total >= 70) {\n//     return \"C\";\n//   } else if (total <= 70 && total >= 60) {\n//     return \"D\";\n//   } else total <= 60 && total >= 0;\n//   {\n//     return \"F\";\n//   }\n// }\n// console.log(getGrade(80, 70, 80));\n// let fff = [5, 78, 24, 503, 300, 68];\n// const newFff = [...fff];\n// function compareNumbers(a, b) {\n//   return a - b;\n// }\n// console.log(newFff.join());\n// console.log(newFff.sort());\n// console.log(newFff.sort(compareNumbers));\n// const date = new Date();\n// console.log(date.getTime());\n// console.log(\"Date: \", date);\n// // Возвращает день месяца от 1 до 31\n// console.log(\"getUTCDate(): \", date.getUTCDate());\n// // Возвращает день недели от 0 до 6\n// console.log(\"getUTCDay(): \", date.getUTCDay());\n// // Возвращает месяц от 0 до 11\n// console.log(\"getUTCMonth(): \", date.getUTCMonth());\n// // Возвращает год из 4 цифр\n// console.log(\"getUTCFullYear(): \", date.getUTCFullYear());\n// // Возвращает час\n// console.log(\"getUTCHours(): \", date.getUTCHours());\n// // Возвращает минуты\n// console.log(\"getUTCMinutes(): \", date.getUTCMinutes());\n// // Возвращает секунды\n// console.log(\"getUTCSeconds(): \", date.getUTCSeconds());\n// // Возвращает миллисекунды\n// console.log(\"getUTCMilliseconds(): \", date.getUTCMilliseconds());\n// // сеттаймаут тестил\n// setTimeout(\n//   (x) => {\n//     console.log(x);\n//     console.log(\"AAAAAAAAAAAAAA\");\n//   },\n//   4000,\n//   \"fuck\"\n// );\n// const pot = (x) => {\n//   console.log(`now is ... ${x}`);\n//   console.log(\"BUGAGA\");\n// };\n// const timeoutId = setTimeout(pot, 2000, \"FUUUUUCK\");\n// // clearTimeout(timeoutId);\n// fetch(\"https://pokeapi.co/api/v2/pokemon/3\")\n//   .then((response) => {\n//     // console.log(response.json())\n//     return response.json();\n//   })\n//   .then((pokemon) => {\n//     console.log(pokemon);\n//   })\n//   .catch((error) => {\n//     console.log(error);\n//   });\n// // // закрепил колбеки (4й модуль)\n// // const filterr = function (array, allCallback) {\n// //     const AF = []\n// //     for (let el of array) {\n// //         let ourSettings = allCallback(el)\n// //         if (ourSettings) {\n// //             AF.push(el)\n// //             console.log(el)\n// //         }\n// //     }\n// //     return AF\n// // }\n// // const callback1 = function (value) {\n// //     return value >= 3\n// // }\n// // const callback2 = function (value) {\n// //     return value <= 7\n// // }\n// // const firstArray = filterr([1, 2, 3, 4, 5], callback1)\n// // console.log(firstArray)\n// // const secondArray = filterr([2, 4, 5, 6, 7, 9, 10], callback2)\n// // console.log(secondArray)\n// // повторяю this (5ймодуль)\n// // чуток практики по this\n// const opo = function () {\n//   console.log(\"fuck this shit\", this);\n//   console.log(\"fuck this tag shit\", this.tag);\n// };\n// const pop = {\n//   tag: \"Jojo\",\n// };\n// pop.show = opo;\n// console.log(pop);\n// pop.show();\n// // практикую прототипное наследование\n// const objeD = {\n//   D: \"z\",\n// };\n// const objeC = Object.create(objeD);\n// objeC.C = \"y\";\n// const objeB = Object.create(objeC);\n// objeB.B = \"x\";\n// const objeA = Object.create(objeB);\n// console.log(objeA);\n// console.log(objeB);\n// console.log(objeC);\n// console.log(objeD);\n// // практикую функция конструктор\n// const Main = function ({\n//   paparoach,\n//   threedaysgrace,\n//   saintassonia,\n//   numbertrack,\n// }) {\n//   this.paparoach = paparoach;\n//   this.threedaysgrace = threedaysgrace;\n//   this.saintassonia = saintassonia;\n// };\n// Main.prototype.method = function () {\n//   console.log(\"FUCK THE SYSTEM\");\n// };\n// Main.prototype.method = function (newsong) {\n//   this.paparoach = newsong;\n// };\n// const lineA = new Main({\n//   paparoach: \"falling appart\",\n//   threedaysgrace: \"its all over\",\n//   saintassonia: \"the fallen\",\n// });\n// const lineB = new Main({\n//   paparoach: \"last resort\",\n//   threedaysgrace: \"never to late\",\n//   saintassonia: \"so what\",\n// });\n// const lineC = new Main({\n//   paparoach: \"help\",\n//   threedaysgrace: \"get out alive\",\n//   saintassonia: \"better late than never\",\n// });\n// console.log(lineA);\n// console.log(lineB);\n// console.log(lineC);\n// lineC.method();\nconst promise = new Promise((resolve, reject)=>{\n    const canFulfill = Math.random() > 0.5;\n    setTimeout(()=>{\n        if (canFulfill) resolve(\"\\u044D\\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0432\\u0441\\u0435 !!!!\");\n        else reject(\"NAHOY )))\");\n    }, 2000);\n    console.log(canFulfill);\n});\nconsole.log(promise);\n// 1я запись\n// promise.then(\n//   (result) => console.log(result),\n//   (error) => console.log(error)\n// );\n// 2я запись (тоже самое) - promise.then(yes, no)\n// 3я запись со вторым then и catch и finally\npromise.then(yes).then((x)=>console.log(x)).catch(no).finally(()=>console.log(\"i will be there everytime\"));\nfunction yes(result) {\n    console.log(`\\u{2705} ${result}`);\n    return \"VIKINGS\";\n}\nfunction no(error) {\n    console.log(`\\u{274C} ${error}`);\n}\n// !!!!!\nconst eeee = {};\nconst wwww = \"1,2,3,4\";\nlet ssss = \"JOHNNY\";\nconsole.log(eeee[wwww]);\neeee[wwww] = ssss; // в пустой объект мы ложим ключем то что в wwww и свойством задаем ssss\nconsole.log(eeee); // теперь у нас не пустой объект\nconsole.log(eeee[wwww]); // это идентичная запись как и обращение через точку к свойству. (но мы не можем так в данном случае -- eeee.'1-2-3-4' -- это не одним словом (сложная) и не покажет через точку)\n//А если поменять местами ssss и wwww -- мы сможем написать через сточку eeee.ssss и увидеть в консоле !!! Квадратные скобки дают намного больше возможностей, чем запись через точку.\nconsole.log(ssss);\n//Задача из кодварс\nfunction greet(language) {\n    const out = {\n        english: \"Welcome\",\n        czech: \"Vitejte\",\n        danish: \"Velkomst\",\n        dutch: \"Welkom\",\n        estonian: \"Tere tulemast\",\n        finnish: \"Tervetuloa\",\n        flemish: \"Welgekomen\",\n        french: \"Bienvenue\",\n        german: \"Willkommen\",\n        irish: \"Failte\",\n        italian: \"Benvenuto\",\n        latvian: \"Gaidits\",\n        lithuanian: \"Laukiamas\",\n        polish: \"Witamy\",\n        spanish: \"Bienvenido\",\n        swedish: \"Valkommen\",\n        welsh: \"Croeso\"\n    };\n    console.log(language);\n    console.log(out[language]); // когда данные приходят динамически и мы не можем знать имя ключа.\n    console.log(out.english);\n    console.log(out[\"english\"]);\n    return out[language] || out.english; //-- или идентично out['english']\n}\ngreet(\"spanish\");\n// console.dir(_);\n// Тренируюсь по cracking.js\n// Урок 1-2\n// чтобы не мутировать первоначальные данные\n// использовать  spread\n// const person = (arg) => {\n//   const newarg = {...arg}\n// };\n// или Object.assign;\n// const param = { name: \"Selena\", profession: \"slut\" };\n// const paramsecond = { price: \"100$\" };\n// const paramthird = { price: \"200$\", age: 19 };\n// const newObj = {};\n// const newperson = Object.assign(newObj, param, paramsecond, paramthird);\n// console.log(newObj);\n// console.log(newObj === newperson);\n// или lodash (_.clone)\n// const obj = [{ a: 1 }, { b: 2 }, { c: 3 }];\n// const newobj = _.clone(obj);\n// console.log(newobj);\n// console.log(newobj === obj);\n// console.log(newobj[0] === obj[0]);\n// урок 3\n// const people = [\n//   { name: \"Bobby\", age: 18, pro: \"fharma\" },\n//   { name: \"Max\", age: 38, pro: \"poker_pro\" },\n//   { name: \"Vova\", age: 38, pro: \"medical\" },\n//   { name: \"Arnold\", age: 20, pro: \"kach\" },\n//   { name: \"Lucy\", age: 19, pro: \"porn_model\" },\n// ];\n// const Bbbb = people.filter((person) => person.age > 35);\n// console.log(Bbbb);\n// const Cccc = people.map((person) => person.age > 35);\n// console.log(Cccc);\n// const ddd = people.map((person) => ({ ...person, name: \"John\" }));\n// console.log(ddd);\n// const oldest = people.reduce((prev, person) => {\n//   // debugger;\n//   if (prev < person.age) {\n//     return person.age;\n//   }\n//   return prev;\n// }, 17);\n// console.log(oldest);\n/////////\n// const PO = \"cat, dog, cow\";\n// const LO = \"cat dog cow\";\n// const OL = LO.split(\" \");\n// const OP = PO.split(\",\");\n// const OLL = OL.join(\", \");\n// const OPP = OP.join(\" |\");\n// console.log(OL);\n// console.log(OP);\n// console.log(OLL);\n// console.log(OPP);\n// //изменение свойства одного из ключей\n// const newName = people.map((person) =>\n//   // debugger;\n//   person.name === \"Vova\" ? (person.name = \"Jamal\") : person.name\n// );\n// console.log(newName);\n// урок 4\nconst bob = {\n    name: \"Bob\",\n    age: 40,\n    prof: \"Builder\"\n};\nconst bill = {\n    name: \"Bill\",\n    prof: \"QA\",\n    yearsExp: 2\n};\nconst lucy = {\n    name: \"Lucy\",\n    prof: \"pornstar\",\n    startYear: 2000\n};\nconst common = {\n    ...bob,\n    ...bill,\n    hasHouse: true\n};\n// const common = Object.assign(bob, bill, { hasHouse: true });\nconsole.log(common);\nconsole.log(bob.prof, bill.age, bob.hasHouse);\nconsole.log(bob);\n// Object.assign мутирует - поэтому в 642 строке hasHose есть - а при спреде - нет\n////////////////\nconst animals = [\n    \"cow\",\n    \"pig\",\n    \"cat\",\n    \"dog\"\n];\n// const example = animals.push(\"horse\");\nconsole.log(animals.push(\"horse\"));\nconsole.log(animals.pop());\n// console.log(example);\nconsole.log(animals);\n// урок 4.1 - замыкание (пример Репеты)\nconst sheff = function(name) {\n    const dish = function(dish) {\n        console.log(`${name} \\u{43F}\\u{440}\\u{438}\\u{433}\\u{43E}\\u{442}\\u{43E}\\u{432}\\u{438}\\u{43B} ${dish}`);\n    };\n    return dish;\n};\nconst result = sheff(\"Alex\");\nresult(\"Cake\");\nconsole.dir(result);\n// деструктуризация\nconst objfordestr = {\n    name: \"Bryan\",\n    age: 28,\n    position: \"teamLead\"\n};\nconst { name, age, position } = objfordestr;\nconsole.log(name);\nconsole.log(age);\nconsole.log(position);\nlet [fistitem, seconditem, ...other] = \"fuck this evil world\".split(\" \");\nconsole.log(fistitem);\nconsole.log(seconditem);\nconsole.log(other);\n// урок 4.2\n// итератор (асинхронный перебор коллекции)\nconst array = [\n    1,\n    2,\n    \"Max\",\n    4,\n    5\n];\nconst iterator = array[Symbol.iterator]();\niterator.next();\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n//\nconst max = {\n    name: \"Max\",\n    age: \"38\",\n    daughter: \"Sofia\"\n};\nconst iterator2 = Object.entries(max)[Symbol.iterator]();\nconsole.log(iterator2.next());\nconsole.log(iterator2.next());\nconsole.log(iterator2.next());\nconsole.log(iterator2.next());\n//this (по Репете 5.1)\n// пример 1\nconst yourt = {\n    name: \"ryan\",\n    age: 28,\n    getage () {\n        console.log(\"age ryan\", this);\n    }\n};\nyourt.getage();\n//пример 2\nconst testThis2 = function() {\n    console.log(\"testThis2\", this);\n    console.log(\"testThis2\", this.tag);\n    console.log(\"testThis2\", this.bug);\n};\nconst ololo = {\n    tag: \"fuck\",\n    bug: \"muck\"\n};\nololo.opa = testThis2;\nconsole.log(\"ololo\", ololo);\nololo.opa();\n//\n// call и apply (вызывают контекст здесь и сейчас), bind (копия ф-и с привязаным контекстом)---- привязка контекста\nconst changeColor = function(color) {\n    console.log(\"changeColor ---->\", this);\n    this.color = color;\n};\nconst hat = {\n    color: \"black\"\n};\n// changeColor.call(hat, \"orange\");\n// console.log(hat);\nconst sweater = {\n    color: \"green\"\n};\n// changeColor.call(sweater, \"orange\");\n// console.log(sweater);\n// или bind\nconst changeHatColor = changeColor.bind(hat);\nconst changeSweaterColor = changeColor.bind(sweater);\nchangeSweaterColor();\nchangeHatColor();\nconsole.log(hat);\nconsole.log(sweater);\nconst ratata = (pop)=>{\n    const pop2 = [\n        ...pop\n    ];\n    const pop3 = pop2.reduce((acc, cur)=>acc + cur, 0);\n    console.log(pop3);\n};\nratata([\n    1,\n    2,\n    3,\n    4,\n    5\n]);\n//craking js 2.3\n// const owner = {\n//   name: \"Freddy\",\n//   age: 21,\n//   home: \"Krakow\",\n// };\n// const dog = {\n//   name: \"Petrovich\",\n//   age: 2,\n//   breed: \"French Buldog\",\n// };\n// const map = new Map();\n// map.set(owner, dog);\n// console.log(owner);\n// console.log(dog);\n// console.log(map);\n// const funrrr = () => {\n//   console.log(map);\n// };\n// const trt = true;\n// const map1 = new Map();\n// map1.set(funrrr, trt);\n// console.log(map1);\nconst qo = \"1\";\nconst qa = 3;\nconsole.log(qa);\nconst qz = \"110\";\nconsole.log(qz);\nconst qs = \"101\";\nconsole.log(qs);\nconst qx = 11;\nconsole.log(qx);\nconst qw = {};\nconst qe = String(qw);\nconsole.log(qe);\nfunction User(name, age, prof, gender, isAdmin) {\n    this.name = name;\n    this.age = age;\n    this.prof = prof;\n    this.gender = gender;\n    this.isAdmin = isAdmin;\n}\nconst zzz = new User(\"Lucy\", 23, \"slut\", \"female\", false);\nconsole.log(zzz);\n// craking js 4.2 (sort, slice, flat)\n// let fff = [1, 1000, 5, 78, 24, 503, 300, 68];\n// const newFff = [...fff];\n// function compareNumbers(a, b) {\n//   return a - b;\n// }\n// function compareNumbersReverse(a, b) {\n//   return b - a;\n// }\n// console.log(newFff.join());\n// console.log(newFff.sort());\n// console.log(newFff.sort(compareNumbers));\n// console.log(newFff.sort(compareNumbersReverse));\nlet wpeokf = \"this is fucking good \";\nlet hfsb = Array.from(wpeokf);\nconsole.log(hfsb);\nconsole.log(hfsb.slice(0, 3));\nconsole.log(hfsb.slice(1, 4));\nconsole.log(hfsb.slice(5, 10));\nlet cbh = [\n    1,\n    2,\n    3,\n    [\n        4,\n        5,\n        [\n            6,\n            7,\n            [\n                8,\n                9\n            ]\n        ]\n    ]\n];\nconsole.log(cbh.flat());\nconsole.log(cbh.flat(2));\nconsole.log(cbh.flat(3));\nconst animalsAgain = [\n    \"cat\",\n    \"dog\",\n    \"fish\",\n    \"bird\"\n];\nconst iteratorAnimals = animalsAgain.entries();\nconsole.log(iteratorAnimals.next());\nconsole.log(iteratorAnimals.next());\nconsole.log(iteratorAnimals.next());\nconsole.log(iteratorAnimals.next());\nconsole.log(iteratorAnimals.next());\n// задача для собеседования с сеттаймаутом - что сдесь не так ?\nfor(var i = 0; i < 10; i++)setTimeout(()=>console.log(i), 0);\n// ответ: сеттайм аут выполняется вконце, когда значение i - уже 10 !!!\n// Решение:\n// Вариант 1 (заменить var (у которого функциональная область видимости - и он создается вне цикла for) на let (у которого блочная область видимости - и он создается внутри цикла for))\nfor(let i = 0; i < 10; i += 1)//sync !!!!!\nsetTimeout(//async !!!!!\n()=>{\n    console.log(i);\n}, 0);\n// Вариант 2 (таким образом на момент вызова колбека ему передастся актуальное значение i - на момент запуска сеттаймаута. a - это второй и до десятого аргумент)\n// for(var i = 0; i < 10; i++) {\n//   setTimeout((a) => console.log(a), 0, i)\n// }\n// Вариант 3\n// for(var i = 0; i < 10; i++) {\n//   const func = () => {\n//     var value = i\n//   setTimeout(() => console.log(value), 0)\n// }\n// func()\n// }\n// Тесты кахута - то что забыл или не заметил проверяю\n// 1 нюанс что выводится если передать иили не передать user (по сути правила для || и &&)\nconst user = {\n    name: \"Lucy\"\n};\nconst myFunc = (user)=>{\n    const currentUser = user || {\n        name: \"Coreena\"\n    };\n    const userName = user && user.name;\n    console.log(currentUser.name, userName);\n};\nmyFunc();\n// myFunc(user)\n// 2 привод к булеан значению 2 варианта\nconst xc = true;\nconsole.log(xc);\nconst zxc = new Boolean(-1);\nconsole.log(zxc);\n// 3 не знал что тут 1 получается\nconst pizdec = 1;\nconst pizdec1 = 1;\nconsole.log(pizdec);\nconsole.log(pizdec1);\n// 4 вывод всех аргументов\nfunction aeto(a, b, c) {\n    var aa = Array.from(arguments).slice((item)=>item);\n    var bb = [\n        ...arguments\n    ].filter((item)=>item);\n    console.log(aa);\n    console.log(bb);\n}\naeto(\"Adonis\", \"Boris\", \"Coco\");\n//5\nvar group = {\n    person: \"MotherFucker\"\n};\nfunction whatAfuck(b) {\n    console.log(b);\n    var newGroup = b;\n    newGroup.person = \"Bill\";\n    if (b) newGroup.person = \"John\";\n    return newGroup;\n}\nvar neewPerson = whatAfuck(group).person;\n// или убрать .person со строки выше и записать в консоль.лог ниже\nconsole.log(neewPerson);\nconsole.log(group.person);\n//6 проверка что покажет bind, apply, call (bind как на уроке - а вот call и apply НЕТ и я ранее такое видел уже)\nvar a11 = {\n    b: 1,\n    getContext: function() {\n        console.log(this);\n    }\n};\nvar d11 = {\n    prop: \"here\"\n};\nvar g11 = a11.getContext.bind(d11);\nlet b11 = a11.getContext.apply(d11);\nconsole.log(g11, b11);\n//7 - проверка как я создал метод для ddd\nvar ddd = {\n    b: 3\n};\nconsole.log(ddd);\nddd.getThis = a11.getContext;\nconsole.log(ddd);\nddd.getThis();\n// const popo = \"FUCK\";\n// const opop = \"fuck\";\n// const iop = \"fUCk\";\n// function dede(variant) {\n//   const changeVariant = variant.split(\"\");\n//   console.log(changeVariant);\n//   const result = changeVariant\n//     .map((el) =>\n//       el === el.toLowerCase() ? el.toUpperCase() : el.toLowerCase()\n//     )\n//     .join(\"\");\n//   console.log(result);\n//   return result;\n// }\n// dede(popo);\n// dede(opop);\n// dede(iop);\n// замыкание\nconst kjkk = (someCount)=>{\n    let count = someCount;\n    const plus = (someNumber)=>{\n        const result = count + someNumber;\n        console.log(result);\n    };\n    const minus = (someNumber)=>{\n        const result = count - someNumber;\n        console.log(result);\n    };\n    const getCurrentCount = ()=>{\n        console.log(`current count is ${count}`);\n    };\n    return {\n        plus,\n        minus,\n        getCurrentCount\n    };\n};\nconst counter1 = kjkk(100);\nconst counter2 = kjkk(200);\ncounter1.getCurrentCount();\ncounter1.plus(3);\ncounter1.minus(20);\ncounter2.getCurrentCount();\ncounter2.plus(44);\ncounter2.minus(79);\nconst strelka = ()=>console.log(\"FUCK\");\nfunction funcc() {}\nconsole.dir(strelka);\nconsole.dir(funcc);\n\n//# sourceMappingURL=index.8d1d558f.js.map\n","// // function findLongestWord(string) {\n\n// //     let allWord = string.split(' ');\n// //     let bigWord = allWord[0];\n\n// //     for (let i = 0; i < allWord.length; i += 1) {\n// //         if (allWord[i].length > bigWord.length) {\n// //             bigWord = allWord[i];\n\n// //         }\n\n// //     }\n// //     return bigWord;\n// // }\n// // console.log(findLongestWord(\"Lucy stacy csilla \"));\n// // console.log(findLongestWord(\"The quick brown fox jumped over the lazy dog\"));\n// // console.log(findLongestWord(\"Google do a roll\"));\n// // console.table(findLongestWord(\"May the force be with you\"));\n\n// function printContactsInfo(names = \"\", phones = \"\") {\n//   const arrayOfNames = names.split(\",\");\n//   const arrayOfPhones = phones.split(\",\");\n//   console.log(\"arrayOfNames\", arrayOfNames);\n//   console.log(\"arrayOfPhones\", arrayOfPhones);\n\n//   for (let i = 0; i < arrayOfNames.length; i += 1) {\n//     const aName = arrayOfNames[i];\n//     const aPhones = arrayOfPhones[i];\n//     console.log(`name: ${aName}; phones: ${aPhones}`);\n//   }\n// }\n\n// printContactsInfo(\n//   \"Jacob,William,Solomon,Nicolas\",\n//   \"89001234567,89001112233,890055566377,890055566300\"\n// );\n\n// // const book = {\n// //     title: \"The Last Kingdom\",\n// //     author: \"Bernard Cornwell\",\n// //     genres: [\"historical prose\", \"adventure\"],\n// //     isPublic: true,\n// //     rating: 8.38,\n// // };\n\n// // book.rating = 9;\n// // book.isPublic = false;\n// // book.genres.push(\"драма\");\n\n// // console.log(book.rating); // 9\n// // console.log(book.isPublic); // false\n// // console.log(book.genres); // ['historical prose', 'adventures', 'драма']\n\n// // const a = { x: 2, y: 10, z: 35 };\n// // const b = { x: 5, y: 4, z: 17, t: 80, q: 55 };\n\n// // const c = { ...a, x: 1, ...b, z: 6, name: 'mango', color: 'green' };\n\n// // console.log(c)\n\n// // const name = \"Repair Droid\";\n// // const price = 2500;\n// // const image = \"https://via.placeholder.com/640x480\";\n// // const tags = [\"on sale\", \"trending\", \"best buy\"];\n\n// // const product = {\n// //     name,\n// //     price,\n// //     image,\n// //     tags,\n// //     // Change code below this line\n// //     // Change code above this line\n// // };\n// // console.log(product);\n\n// // const emailInputName = \"email\";\n// // const passwordInputName = \"password\";\n\n// // const credentials = {\n// //     // Change code below this line\n// //     [emailInputName]: \"henry.carter@aptmail.com\",\n// //     [passwordInputName]: \"jqueryismyjam\",\n\n// //     // Change code above this line\n// // };\n// // console.log(credentials);\n\n// // const products = [\n// //     { name: \"Radar\", price: 1300, quantity: 4 },\n// //     { name: \"Scanner\", price: 2700, quantity: 3 },\n// //     { name: \"Droid\", price: 400, quantity: 7 },\n// //     { name: \"Grip\", price: 1200, quantity: 9 },\n// // ];\n\n// // console.table(products);\n\n// // function getProductPrice(productName) {\n// //     // Change code below this line\n// //     for (const product of products) {\n// //         if (product.name === productName) {\n// //             return (product.price);\n// //         }\n// //     }\n\n// //     return null;\n// //     // Change code above this line\n// // }\n// // console.log(getProductPrice(\"Radar\"));\n\n// // const products = [\n// //     { name: \"Radar\", price: 1300, quantity: 4 },\n// //     { name: \"Scanner\", price: 2700, quantity: 3 },\n// //     { name: \"Droid\", price: 400, quantity: 7 },\n// //     { name: \"Grip\", price: 1200, quantity: 9 },\n// // ];\n\n// // function getAllPropValues(propName) {\n// //     // Change code below this line\n// //     const emptyMassive = [];\n\n// //     for (const product of products) {\n// //         if (Object.keys(product).includes(propName)) {\n// //             emptyMassive.push(product[propName]);\n// //         }\n// //     }\n// //     return emptyMassive;\n\n// //     // Change code above this line\n// // }\n// // console.log(getAllPropValues('price'));\n\n// // автопроверка 3 модуль 41 задача\n// // const atTheOldToad = {\n// //     potions: [\n// //         { name: \"Speed potion\", price: 460 },\n// //         { name: \"Dragon breath\", price: 780 },\n// //         { name: \"Stone skin\", price: 520 },\n// //     ],\n// //     getPotions() {\n// //         return this.potions;\n// //     },\n// // addPotion(newPotion) {\n// //     for (potion of this.potions) {\n// //         if (potion.name === newPotion.name) {\n// //             return `Error! Potion ${newPotion.name} is already in your inventory!`;\n// //         }\n// //     }\n// //     this.potions.push(newPotion);\n// // },\n// //     removePotion(potionName) {\n// //         for (let potion of this.potions) {\n\n// //             if (potion.name === potionName) {\n// //                 const indexPotion = this.potions.indexOf(potion);\n\n// //                 if (indexPotion === -1) {\n// //                     return `Potion ${potionName} is not in inventory!`;\n// //                 };\n// //                 this.potions.splice(indexPotion, 1);\n// //             }\n// //         }\n// //     },\n// //     updatePotionName(oldName, newName) {\n// //         for (let potion of this.potions) {\n// //             if (potion.name === oldName) {\n// //                 potion.name = newName;\n// //             }\n// //         }\n// //         // Change code above this line\n// //     }\n// // }\n\n// // callback - пример 1\n// // const fna = function (message, callback) {\n// //     console.log(message);\n// //     console.log(callback);\n// //     callback(100, 888);\n// // }\n\n// // const fnb = function (number, total) {\n// //     console.log(\"вызов fnb\", number, total);\n// // }\n// // fna('fuck monkey', fnb);\n\n// // callback - пример 2 + инлайн функция + строчная\n// const fnA = function (a, b, callback) {\n//   const result = callback(a, b);\n//   console.log(\"result\", result);\n// };\n\n// const fnB = function (x, y) {\n//   return x + y;\n// };\n\n// const fnC = function (x, y) {\n//   return x - y;\n// };\n\n// fnA(2, 3, fnB);\n\n// fnA(10, 8, function (x, y) {\n//   return x - y;\n// });\n\n// fnA(11, 8, (x, y) => x * y);\n\n// // const navEl = document.querySelector('.list');\n// // const navLiEl = navEl.firstElementChild;\n// // console.log(navLiEl);\n// // const navAllChild = navLiEl.firstElementChild;\n// // console.log(navAllChild);\n// // navEl.classList.add('fuck');\n// // navLiEl.classList.toggle('in-open');\n\n// // navAllChild.textContent = 'Влажный язык'\n// // console.log(navAllChild);\n// // const imgForEl = document.createElement('img');\n// // imgForEl.alt = 'бабочка'\n// // navLiEl.appendChild(imgForEl);\n// // console.log(navLiEl);\n\n// // const min = 6;\n// // const max = 21;\n// // let total = 0;\n\n// // for (let i = min; i <= max; i += 1) {\n\n// //     if (i % 2 !== 0) {\n// //         continue;\n// //     }\n// //     total += i;\n// // };\n// // console.log(total)\n\n// // const string = \"javascript\";\n\n// // for (const character of string) {\n// //     console.log(character);\n// // }\n\n// const tratata = [];\n// console.log(tratata);\n\n// const fmdlkb = [\"a\", \"b\", \"c\", \"d\", \"e\", 2, 7];\n// fmdlkb.pop();\n// console.log(fmdlkb);\n// fmdlkb.shift();\n// console.log(fmdlkb);\n// fmdlkb.unshift(\"Z\");\n// console.log(fmdlkb);\n// fmdlkb.splice(2, 2, \"Q\");\n// console.log(fmdlkb);\n// //\n// // console.log(fmdlkb.join(' '));\n\n// const ewf = fmdlkb.join(\"\");\n// console.log(ewf);\n\n// const rrr = [38, 90, 42, 17];\n// // Math.min(...rrr);\n// console.log(Math.max(...rrr));\n\n// function find_average(array) {\n//   let total = 0;\n//   if (array.length === 0) {\n//     return 0;\n//   }\n\n//   for (let arr of array) {\n//     total += arr;\n//   }\n//   return total / array.length;\n// }\n// // const find_average = (array) => {\n// //     return array.length === 0 ? 0 : array.reduce((acc, ind) => acc + ind, 0) / array.length\n// // }\n// // find_average([1, 2, 3]);\n\n// // function find_average(array) {\n// //     if (array.length == 0) return 0\n// //     let result = 0;\n\n// //     for (let num of array) {\n// //         result += num;\n// //     }\n// //     return result / array.length;\n// // }\n\n// // function find_average(array) {\n// //     return (Math.min(...array) + Math.max(...array)) / 2;\n// // }\n\n// console.log(find_average([1, 2, 3]));\n// console.log(find_average([10, 30, 70]));\n// console.log(find_average([]));\n\n// function getGrade(s1, s2, s3) {\n//   let total = (s1 + s2 + s3) / 3;\n//   if (total <= 100 && total >= 90) {\n//     return \"A\";\n//   } else if (total <= 90 && total >= 80) {\n//     return \"B\";\n//   } else if (total <= 80 && total >= 70) {\n//     return \"C\";\n//   } else if (total <= 70 && total >= 60) {\n//     return \"D\";\n//   } else total <= 60 && total >= 0;\n//   {\n//     return \"F\";\n//   }\n// }\n\n// console.log(getGrade(80, 70, 80));\n\n// let fff = [5, 78, 24, 503, 300, 68];\n\n// const newFff = [...fff];\n// function compareNumbers(a, b) {\n//   return a - b;\n// }\n// console.log(newFff.join());\n// console.log(newFff.sort());\n// console.log(newFff.sort(compareNumbers));\n\n// const date = new Date();\n// console.log(date.getTime());\n\n// console.log(\"Date: \", date);\n\n// // Возвращает день месяца от 1 до 31\n// console.log(\"getUTCDate(): \", date.getUTCDate());\n\n// // Возвращает день недели от 0 до 6\n// console.log(\"getUTCDay(): \", date.getUTCDay());\n\n// // Возвращает месяц от 0 до 11\n// console.log(\"getUTCMonth(): \", date.getUTCMonth());\n\n// // Возвращает год из 4 цифр\n// console.log(\"getUTCFullYear(): \", date.getUTCFullYear());\n\n// // Возвращает час\n// console.log(\"getUTCHours(): \", date.getUTCHours());\n\n// // Возвращает минуты\n// console.log(\"getUTCMinutes(): \", date.getUTCMinutes());\n\n// // Возвращает секунды\n// console.log(\"getUTCSeconds(): \", date.getUTCSeconds());\n\n// // Возвращает миллисекунды\n// console.log(\"getUTCMilliseconds(): \", date.getUTCMilliseconds());\n\n// // сеттаймаут тестил\n// setTimeout(\n//   (x) => {\n//     console.log(x);\n//     console.log(\"AAAAAAAAAAAAAA\");\n//   },\n//   4000,\n//   \"fuck\"\n// );\n\n// const pot = (x) => {\n//   console.log(`now is ... ${x}`);\n//   console.log(\"BUGAGA\");\n// };\n// const timeoutId = setTimeout(pot, 2000, \"FUUUUUCK\");\n\n// // clearTimeout(timeoutId);\n\n// fetch(\"https://pokeapi.co/api/v2/pokemon/3\")\n//   .then((response) => {\n//     // console.log(response.json())\n//     return response.json();\n//   })\n//   .then((pokemon) => {\n//     console.log(pokemon);\n//   })\n//   .catch((error) => {\n//     console.log(error);\n//   });\n\n// // // закрепил колбеки (4й модуль)\n// // const filterr = function (array, allCallback) {\n// //     const AF = []\n// //     for (let el of array) {\n// //         let ourSettings = allCallback(el)\n// //         if (ourSettings) {\n// //             AF.push(el)\n// //             console.log(el)\n// //         }\n// //     }\n\n// //     return AF\n// // }\n\n// // const callback1 = function (value) {\n// //     return value >= 3\n// // }\n// // const callback2 = function (value) {\n// //     return value <= 7\n// // }\n\n// // const firstArray = filterr([1, 2, 3, 4, 5], callback1)\n// // console.log(firstArray)\n// // const secondArray = filterr([2, 4, 5, 6, 7, 9, 10], callback2)\n// // console.log(secondArray)\n\n// // повторяю this (5ймодуль)\n// // чуток практики по this\n// const opo = function () {\n//   console.log(\"fuck this shit\", this);\n//   console.log(\"fuck this tag shit\", this.tag);\n// };\n\n// const pop = {\n//   tag: \"Jojo\",\n// };\n\n// pop.show = opo;\n// console.log(pop);\n\n// pop.show();\n\n// // практикую прототипное наследование\n// const objeD = {\n//   D: \"z\",\n// };\n\n// const objeC = Object.create(objeD);\n\n// objeC.C = \"y\";\n\n// const objeB = Object.create(objeC);\n\n// objeB.B = \"x\";\n\n// const objeA = Object.create(objeB);\n\n// console.log(objeA);\n// console.log(objeB);\n// console.log(objeC);\n// console.log(objeD);\n\n// // практикую функция конструктор\n\n// const Main = function ({\n//   paparoach,\n//   threedaysgrace,\n//   saintassonia,\n//   numbertrack,\n// }) {\n//   this.paparoach = paparoach;\n//   this.threedaysgrace = threedaysgrace;\n//   this.saintassonia = saintassonia;\n// };\n\n// Main.prototype.method = function () {\n//   console.log(\"FUCK THE SYSTEM\");\n// };\n\n// Main.prototype.method = function (newsong) {\n//   this.paparoach = newsong;\n// };\n\n// const lineA = new Main({\n//   paparoach: \"falling appart\",\n//   threedaysgrace: \"its all over\",\n//   saintassonia: \"the fallen\",\n// });\n// const lineB = new Main({\n//   paparoach: \"last resort\",\n//   threedaysgrace: \"never to late\",\n//   saintassonia: \"so what\",\n// });\n// const lineC = new Main({\n//   paparoach: \"help\",\n//   threedaysgrace: \"get out alive\",\n//   saintassonia: \"better late than never\",\n// });\n\n// console.log(lineA);\n// console.log(lineB);\n// console.log(lineC);\n\n// lineC.method();\n\nconst promise = new Promise((resolve, reject) => {\n  const canFulfill = Math.random() > 0.5;\n\n  setTimeout(() => {\n    if (canFulfill) {\n      resolve(\"эуспешно все !!!!\");\n    } else {\n      reject(\"NAHOY )))\");\n    }\n  }, 2000);\n  console.log(canFulfill);\n});\nconsole.log(promise);\n\n// 1я запись\n// promise.then(\n//   (result) => console.log(result),\n//   (error) => console.log(error)\n// );\n// 2я запись (тоже самое) - promise.then(yes, no)\n// 3я запись со вторым then и catch и finally\npromise\n  .then(yes)\n  .then((x) => console.log(x))\n  .catch(no)\n  .finally(() => console.log(\"i will be there everytime\"));\n\nfunction yes(result) {\n  console.log(`✅ ${result}`);\n  return \"VIKINGS\";\n}\nfunction no(error) {\n  console.log(`❌ ${error}`);\n}\n\n// !!!!!\nconst eeee = {};\nconst wwww = \"1,2,3,4\";\nlet ssss = \"JOHNNY\";\nconsole.log(eeee[wwww]);\neeee[wwww] = ssss; // в пустой объект мы ложим ключем то что в wwww и свойством задаем ssss\nconsole.log(eeee); // теперь у нас не пустой объект\nconsole.log(eeee[wwww]); // это идентичная запись как и обращение через точку к свойству. (но мы не можем так в данном случае -- eeee.'1-2-3-4' -- это не одним словом (сложная) и не покажет через точку)\n//А если поменять местами ssss и wwww -- мы сможем написать через сточку eeee.ssss и увидеть в консоле !!! Квадратные скобки дают намного больше возможностей, чем запись через точку.\nconsole.log(ssss);\n\n//Задача из кодварс\nfunction greet(language) {\n  const out = {\n    english: \"Welcome\",\n    czech: \"Vitejte\",\n    danish: \"Velkomst\",\n    dutch: \"Welkom\",\n    estonian: \"Tere tulemast\",\n    finnish: \"Tervetuloa\",\n    flemish: \"Welgekomen\",\n    french: \"Bienvenue\",\n    german: \"Willkommen\",\n    irish: \"Failte\",\n    italian: \"Benvenuto\",\n    latvian: \"Gaidits\",\n    lithuanian: \"Laukiamas\",\n    polish: \"Witamy\",\n    spanish: \"Bienvenido\",\n    swedish: \"Valkommen\",\n    welsh: \"Croeso\",\n  };\n  console.log(language);\n  console.log(out[language]); // когда данные приходят динамически и мы не можем знать имя ключа.\n\n  console.log(out.english);\n  console.log(out[\"english\"]);\n  return out[language] || out.english; //-- или идентично out['english']\n}\ngreet(\"spanish\");\n\n// console.dir(_);\n\n// Тренируюсь по cracking.js\n// Урок 1-2\n// чтобы не мутировать первоначальные данные\n// использовать  spread\n// const person = (arg) => {\n//   const newarg = {...arg}\n// };\n\n// или Object.assign;\n// const param = { name: \"Selena\", profession: \"slut\" };\n// const paramsecond = { price: \"100$\" };\n// const paramthird = { price: \"200$\", age: 19 };\n// const newObj = {};\n// const newperson = Object.assign(newObj, param, paramsecond, paramthird);\n// console.log(newObj);\n// console.log(newObj === newperson);\n\n// или lodash (_.clone)\n// const obj = [{ a: 1 }, { b: 2 }, { c: 3 }];\n// const newobj = _.clone(obj);\n// console.log(newobj);\n// console.log(newobj === obj);\n// console.log(newobj[0] === obj[0]);\n\n// урок 3\n// const people = [\n//   { name: \"Bobby\", age: 18, pro: \"fharma\" },\n//   { name: \"Max\", age: 38, pro: \"poker_pro\" },\n//   { name: \"Vova\", age: 38, pro: \"medical\" },\n//   { name: \"Arnold\", age: 20, pro: \"kach\" },\n//   { name: \"Lucy\", age: 19, pro: \"porn_model\" },\n// ];\n\n// const Bbbb = people.filter((person) => person.age > 35);\n// console.log(Bbbb);\n\n// const Cccc = people.map((person) => person.age > 35);\n// console.log(Cccc);\n\n// const ddd = people.map((person) => ({ ...person, name: \"John\" }));\n// console.log(ddd);\n\n// const oldest = people.reduce((prev, person) => {\n//   // debugger;\n//   if (prev < person.age) {\n//     return person.age;\n//   }\n//   return prev;\n// }, 17);\n// console.log(oldest);\n\n/////////\n// const PO = \"cat, dog, cow\";\n// const LO = \"cat dog cow\";\n\n// const OL = LO.split(\" \");\n// const OP = PO.split(\",\");\n// const OLL = OL.join(\", \");\n// const OPP = OP.join(\" |\");\n\n// console.log(OL);\n// console.log(OP);\n// console.log(OLL);\n// console.log(OPP);\n\n// //изменение свойства одного из ключей\n// const newName = people.map((person) =>\n//   // debugger;\n//   person.name === \"Vova\" ? (person.name = \"Jamal\") : person.name\n// );\n// console.log(newName);\n\n// урок 4\n\nconst bob = { name: \"Bob\", age: 40, prof: \"Builder\" };\nconst bill = { name: \"Bill\", prof: \"QA\", yearsExp: 2 };\nconst lucy = { name: \"Lucy\", prof: \"pornstar\", startYear: 2000 };\n\nconst common = { ...bob, ...bill, hasHouse: true };\n// const common = Object.assign(bob, bill, { hasHouse: true });\n\nconsole.log(common);\nconsole.log(bob.prof, bill.age, bob.hasHouse);\nconsole.log(bob);\n\n// Object.assign мутирует - поэтому в 642 строке hasHose есть - а при спреде - нет\n////////////////\n\nconst animals = [\"cow\", \"pig\", \"cat\", \"dog\"];\n\n// const example = animals.push(\"horse\");\nconsole.log(animals.push(\"horse\"));\nconsole.log(animals.pop());\n// console.log(example);\nconsole.log(animals);\n\n// урок 4.1 - замыкание (пример Репеты)\nconst sheff = function (name) {\n  const dish = function (dish) {\n    console.log(`${name} приготовил ${dish}`);\n  };\n  return dish;\n};\n\nconst result = sheff(\"Alex\");\n\nresult(\"Cake\");\nconsole.dir(result);\n\n// деструктуризация\nconst objfordestr = {\n  name: \"Bryan\",\n  age: 28,\n  position: \"teamLead\",\n};\n\nconst { name, age, position } = objfordestr;\n\nconsole.log(name);\nconsole.log(age);\nconsole.log(position);\n\nlet [fistitem, seconditem, ...other] = \"fuck this evil world\".split(\" \");\n\nconsole.log(fistitem);\nconsole.log(seconditem);\nconsole.log(other);\n\n// урок 4.2\n// итератор (асинхронный перебор коллекции)\n\nconst array = [1, 2, \"Max\", 4, 5];\nconst iterator = array[Symbol.iterator]();\niterator.next();\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n//\n\nconst max = {\n  name: \"Max\",\n  age: \"38\",\n  daughter: \"Sofia\",\n};\n\nconst iterator2 = Object.entries(max)[Symbol.iterator]();\nconsole.log(iterator2.next());\nconsole.log(iterator2.next());\nconsole.log(iterator2.next());\nconsole.log(iterator2.next());\n\n//this (по Репете 5.1)\n// пример 1\nconst yourt = {\n  name: \"ryan\",\n  age: 28,\n\n  getage() {\n    console.log(\"age ryan\", this);\n  },\n};\n\nyourt.getage();\n\n//пример 2\nconst testThis2 = function () {\n  console.log(\"testThis2\", this);\n  console.log(\"testThis2\", this.tag);\n  console.log(\"testThis2\", this.bug);\n};\n\nconst ololo = {\n  tag: \"fuck\",\n  bug: \"muck\",\n};\n\nololo.opa = testThis2;\n\nconsole.log(\"ololo\", ololo);\n\nololo.opa();\n\n//\n// call и apply (вызывают контекст здесь и сейчас), bind (копия ф-и с привязаным контекстом)---- привязка контекста\nconst changeColor = function (color) {\n  console.log(\"changeColor ---->\", this);\n  this.color = color;\n};\n\nconst hat = {\n  color: \"black\",\n};\n// changeColor.call(hat, \"orange\");\n// console.log(hat);\n\nconst sweater = {\n  color: \"green\",\n};\n\n// changeColor.call(sweater, \"orange\");\n// console.log(sweater);\n\n// или bind\nconst changeHatColor = changeColor.bind(hat);\nconst changeSweaterColor = changeColor.bind(sweater);\nchangeSweaterColor();\nchangeHatColor();\nconsole.log(hat);\nconsole.log(sweater);\n\nconst ratata = (pop) => {\n  const pop2 = [...pop];\n  const pop3 = pop2.reduce((acc, cur) => acc + cur, 0);\n  console.log(pop3);\n};\n\nratata([1, 2, 3, 4, 5]);\n\n//craking js 2.3\n// const owner = {\n//   name: \"Freddy\",\n//   age: 21,\n//   home: \"Krakow\",\n// };\n\n// const dog = {\n//   name: \"Petrovich\",\n//   age: 2,\n//   breed: \"French Buldog\",\n// };\n\n// const map = new Map();\n\n// map.set(owner, dog);\n// console.log(owner);\n// console.log(dog);\n// console.log(map);\n\n// const funrrr = () => {\n//   console.log(map);\n// };\n\n// const trt = true;\n// const map1 = new Map();\n\n// map1.set(funrrr, trt);\n\n// console.log(map1);\n\nconst qo = \"1\";\nconst qa = +\"2\" + 1;\nconsole.log(qa);\n\nconst qz = 1 + \"10\";\nconsole.log(qz);\n\nconst qs = \"10\" + 1;\nconsole.log(qs);\n\nconst qx = 1 + +\"10\";\nconsole.log(qx);\n\nconst qw = {};\nconst qe = String(qw);\nconsole.log(qe);\n\nfunction User(name, age, prof, gender, isAdmin) {\n  this.name = name;\n  this.age = age;\n  this.prof = prof;\n  this.gender = gender;\n  this.isAdmin = isAdmin;\n}\nconst zzz = new User(\"Lucy\", 23, \"slut\", \"female\", false);\nconsole.log(zzz);\n\n// craking js 4.2 (sort, slice, flat)\n// let fff = [1, 1000, 5, 78, 24, 503, 300, 68];\n\n// const newFff = [...fff];\n// function compareNumbers(a, b) {\n//   return a - b;\n// }\n\n// function compareNumbersReverse(a, b) {\n//   return b - a;\n// }\n// console.log(newFff.join());\n// console.log(newFff.sort());\n// console.log(newFff.sort(compareNumbers));\n// console.log(newFff.sort(compareNumbersReverse));\n\nlet wpeokf = \"this is fucking good \";\nlet hfsb = Array.from(wpeokf);\nconsole.log(hfsb);\nconsole.log(hfsb.slice(0, 3));\nconsole.log(hfsb.slice(1, 4));\nconsole.log(hfsb.slice(5, 10));\n\nlet cbh = [1, 2, 3, [4, 5, [6, 7, [8, 9]]]];\nconsole.log(cbh.flat());\nconsole.log(cbh.flat(2));\nconsole.log(cbh.flat(3));\n\nconst animalsAgain = [\"cat\", \"dog\", \"fish\", \"bird\"];\nconst iteratorAnimals = animalsAgain.entries();\nconsole.log(iteratorAnimals.next());\nconsole.log(iteratorAnimals.next());\nconsole.log(iteratorAnimals.next());\nconsole.log(iteratorAnimals.next());\nconsole.log(iteratorAnimals.next());\n\n// задача для собеседования с сеттаймаутом - что сдесь не так ?\nfor (var i = 0; i < 10; i++) {\n  setTimeout(() => console.log(i), 0);\n}\n// ответ: сеттайм аут выполняется вконце, когда значение i - уже 10 !!!\n\n// Решение:\n// Вариант 1 (заменить var (у которого функциональная область видимости - и он создается вне цикла for) на let (у которого блочная область видимости - и он создается внутри цикла for))\nfor (let i = 0; i < 10; i += 1) {\n  //sync !!!!!\n  setTimeout(\n    //async !!!!!\n    () => {\n      console.log(i);\n    },\n    0\n  );\n}\n// Вариант 2 (таким образом на момент вызова колбека ему передастся актуальное значение i - на момент запуска сеттаймаута. a - это второй и до десятого аргумент)\n// for(var i = 0; i < 10; i++) {\n//   setTimeout((a) => console.log(a), 0, i)\n// }\n\n// Вариант 3\n// for(var i = 0; i < 10; i++) {\n//   const func = () => {\n//     var value = i\n//   setTimeout(() => console.log(value), 0)\n// }\n// func()\n// }\n\n// Тесты кахута - то что забыл или не заметил проверяю\n// 1 нюанс что выводится если передать иили не передать user (по сути правила для || и &&)\nconst user = { name: \"Lucy\" };\n\nconst myFunc = (user) => {\n  const currentUser = user || { name: \"Coreena\" };\n  const userName = user && user.name;\n  console.log(currentUser.name, userName);\n};\n\nmyFunc();\n// myFunc(user)\n\n// 2 привод к булеан значению 2 варианта\nconst xc = !!-1;\nconsole.log(xc);\nconst zxc = new Boolean(-1);\nconsole.log(zxc);\n\n// 3 не знал что тут 1 получается\nconst pizdec = true + false;\nconst pizdec1 = true - false;\nconsole.log(pizdec);\nconsole.log(pizdec1);\n\n// 4 вывод всех аргументов\nfunction aeto(a, b, c) {\n  var aa = Array.from(arguments).slice((item) => item);\n  var bb = [...arguments].filter((item) => item);\n\n  console.log(aa);\n  console.log(bb);\n}\n\naeto(\"Adonis\", \"Boris\", \"Coco\");\n\n//5\nvar group = {\n  person: \"MotherFucker\",\n};\n\nfunction whatAfuck(b) {\n  console.log(b);\n  var newGroup = b;\n  newGroup.person = \"Bill\";\n\n  if (b) {\n    newGroup.person = \"John\";\n  }\n  return newGroup;\n}\nvar neewPerson = whatAfuck(group).person;\n// или убрать .person со строки выше и записать в консоль.лог ниже\nconsole.log(neewPerson);\nconsole.log(group.person);\n\n//6 проверка что покажет bind, apply, call (bind как на уроке - а вот call и apply НЕТ и я ранее такое видел уже)\nvar a11 = {\n  b: 1,\n  getContext: function () {\n    console.log(this);\n  },\n};\nvar d11 = { prop: \"here\" };\nvar g11 = a11.getContext.bind(d11);\nlet b11 = a11.getContext.apply(d11);\nconsole.log(g11, b11);\n\n//7 - проверка как я создал метод для ddd\nvar ddd = { b: 3 };\nconsole.log(ddd);\nddd.getThis = a11.getContext;\nconsole.log(ddd);\nddd.getThis();\n\n// const popo = \"FUCK\";\n// const opop = \"fuck\";\n// const iop = \"fUCk\";\n\n// function dede(variant) {\n//   const changeVariant = variant.split(\"\");\n//   console.log(changeVariant);\n//   const result = changeVariant\n//     .map((el) =>\n//       el === el.toLowerCase() ? el.toUpperCase() : el.toLowerCase()\n//     )\n//     .join(\"\");\n//   console.log(result);\n//   return result;\n// }\n// dede(popo);\n// dede(opop);\n// dede(iop);\n\n// замыкание\nconst kjkk = (someCount) => {\n  let count = someCount;\n\n  const plus = (someNumber) => {\n    const result = count + someNumber;\n    console.log(result);\n  };\n\n  const minus = (someNumber) => {\n    const result = count - someNumber;\n    console.log(result);\n  };\n\n  const getCurrentCount = () => {\n    console.log(`current count is ${count}`);\n  };\n\n  return { plus, minus, getCurrentCount };\n};\n\nconst counter1 = kjkk(100);\nconst counter2 = kjkk(200);\n\ncounter1.getCurrentCount();\ncounter1.plus(3);\ncounter1.minus(20);\ncounter2.getCurrentCount();\ncounter2.plus(44);\ncounter2.minus(79);\n\nconst strelka = () => console.log(\"FUCK\");\n\nfunction funcc() {}\nconsole.dir(strelka);\nconsole.dir(funcc);\n"],"names":["promise","Promise","resolve","reject","canFulfill","Math","random","setTimeout","console","log","then","result","x","catch","error","finally","eeee","wwww","ssss","greet","language","out","english","czech","danish","dutch","estonian","finnish","flemish","french","german","irish","italian","latvian","lithuanian","polish","spanish","swedish","welsh","bob","name","age","prof","bill","yearsExp","hasHouse","animals","push","pop","dish","dir","position","fistitem","seconditem","other","split","iterator","array","Symbol","next","iterator2","Object","entries","daughter","yourt","getage","ololo","tag","bug","opa","changeColor","color","hat","sweater","changeHatColor","bind","changeSweaterColor","pop2","reduce","acc","cur","String","gender","isAdmin","hfsb","Array","from","slice","cbh","flat","iteratorAnimals","animalsAgain","i","myFunc","user","currentUser","userName","Boolean","aeto","a","b","c","aa","arguments","item","bb","filter","group","person","whatAfuck","newGroup","a11","getContext","d11","prop","apply","ddd","getThis","kjkk","someCount","plus","someNumber","count","minus","getCurrentCount","counter1","counter2"],"version":3,"file":"index.8d1d558f.js.map"}